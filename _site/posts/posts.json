[
  {
    "path": "posts/2020-12-09-advent-of-code-2020/",
    "title": "Advent of Code 2020",
    "description": "My attempts at Advent of Code, 2020",
    "author": [
      {
        "name": "Ella Kaye",
        "url": {}
      }
    ],
    "date": "2020-12-09",
    "categories": [],
    "contents": "\n\nContents\nDay 1: Report Repair\nDay 2: Password Philosophy\nDay 3: Toboggan Trajectory\nDay 4: Passport Processing\nDay 5: Binary Boarding\nDay 6: Custom Customs\nDay 7: Handy Haverstocks\nDay 8: Handheld Halting\nDay 9: Encoding Error\nDay 10: Adapter Array\nDay 11: Seating System\nNext\n\nAdvent of Code is a series of small programming challenges, released daily throughout December in the run-up to Christmas. Part 1 of the challenge is given first. On its successful completion, Part 2 is revealed. The challenges are designed to be solved in any programming language. I will be using R.\nThere will no doubt be a wide variety of ways to solve these problems. I’m going to go with the first thing I think of that gets the right answer. In most cases, I expect that there will be more concise and efficient solutions. Most of the time I’m working in R, it’s within the tidyverse, so I imagine that framework will feature heavily below.\nEach participant gets different input data, so my numerical solutions may be different from others. If you’re not signed up for Advent of Code yourself, but want to follow along with my data, you can download it at from the data links at the beginning of each day’s section. The links in the day section headers take you to challenge on the Advent of Code page.\nDay 1: Report Repair\nMy day 1 data\nPart 1: Two numbers\nThe challenge is to find two numbers from a list that sum to 2020, then to report their product.\nexpand.grid() creates a data frame from all combinations of the supplied vectors. Since the vectors are the same, each pair is duplicated. In this case the two numbers in the list that sum to 2020 are 704 and 1316, and we have one row with 704 as Var1 and one with 704 as Var2. slice(1) takes the first occurrence of the pair.\n\n\nlibrary(dplyr)\n\nexpenses <- readLines(\"data/AoC_day1.txt\") %>%\n  as.numeric()\n\nexpand.grid(expenses, expenses) %>% \n  mutate(sum = Var1 + Var2) %>%\n  filter(sum == 2020) %>%\n  mutate(prod = Var1 * Var2) %>%\n  slice(1) %>%\n  pull(prod)\n\n\n[1] 926464\n\nPart 2: Three numbers\nThe follow-up challenge is the same but with three numbers. I went with essentially the same code but it’s notably slower. There are a lot of repeated calculations here: each triplet appears six times in the table.\n\n\nexpand.grid(expenses, expenses, expenses) %>% \n  mutate(sum = Var1 + Var2 + Var3) %>%\n  filter(sum == 2020) %>%\n  mutate(prod = Var1 * Var2 * Var3) %>%\n  slice(1) %>%\n  pull(prod)\n\n\n[1] 65656536\n\nDay 2: Password Philosophy\nMy day 2 data\nPart 1: Number of letters\nWe need to find how many passwords are valid according to their policy. The policies and passwords are given as follows:\n1-3 a: abcde\n1-3 b: cdefg\n2-9 c: ccccccccc\nEach line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\n\n\nFirst load the libraries we’ll need. We then read in the data and use tidyr functions to separate out the parts of the policy and the password, making sure to convert the columns to numeric as appropriate:\n\n\npasswords <- readr::read_tsv(\"data/AoC_day2.txt\", col_names = FALSE) %>%\n  separate(X1, c(\"policy\", \"password\"), sep = \":\") %>%\n  separate(policy, c(\"count\", \"letter\"), sep = \" \") %>%\n  separate(count, c(\"min\", \"max\")) %>%\n  mutate(min = as.integer(min),\n         max = as.integer(max))\n\n\n\nNext, we use the stringr function str_count() to count how many times the given letter appears in the password, and conditional logic to check whether it is repeated within the specified number of times. Because TRUE has a numeric value of 1 and FALSE has a numeric value of 0, we can sum the resulting column to get a count of how many passwords are valid according to their policies.\n\n\npasswords %>%\n  mutate(count = str_count(password, letter)) %>%\n  mutate(password_in_policy = if_else(count >= min & count <= max, TRUE, FALSE)) %>%\n  summarise(correct = sum(password_in_policy)) %>%\n  pull(correct)\n\n\n[1] 625\n\nPart 2: Position of letters\nNow the policy is interpreted differently. Each policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. Exactly one of these positions must contain the given letter. How many are valid now?\nThere were a couple of gotchas here. When I used separate() in the previous part, I had inadvertently left a leading whitespace in front of the password, something that was messing up my indexing with str_sub. Using str_trim() first cleared that up. Also, we need exactly one of the positions to match. | is an inclusive or. We need xor() for exclusive or instead.\n\n\npasswords %>%\n  mutate(password = str_trim(password)) %>%\n  mutate(pos1_letter = str_sub(password, min, min),\n         pos2_letter = str_sub(password, max, max)) %>%\n  mutate(match_one = xor(pos1_letter == letter, pos2_letter == letter)) %>%\n  summarise(correct = sum(match_one)) %>%\n  pull(correct) \n\n\n[1] 391\n\nDay 3: Toboggan Trajectory\nMy day 3 data\nPart 1: Encountering trees\nStarting at the top left corner of the map, how many trees (“#”) do we encounter, going at a trajectory of 3 right and 1 down?\nFirst, read in the data and save it into a matrix. My method here feels really hack-y. I’m sure there must be a better approach.\n\n\nlibrary(dplyr)\n\ntree_map <- readr::read_tsv(\"data/AoC_day3.txt\", col_names = FALSE)\n\nnum_col <- tree_map %>%\n  mutate(length = str_length(X1)) %>%\n  slice(1) %>%\n  pull(length)\n\ntree_vec <- tree_map %>%\n  mutate(X1 = strsplit(X1, split = character(0), fixed = TRUE)) %>%\n  pull(X1) %>%\n  unlist()\n\ntree_mat <- matrix(tree_vec, ncol = num_col, byrow = TRUE)\n\n\n\nNow work my way across and down the matrix, using the %% modulo operator to loop round where necessary. The -1 and +1 in the line ((y + right - 1) %% num_col) + 1 is a hack to get round the fact that, for num_col columns, the modulo runs from 0 to num_col - 1, but the column indexes for our matrix run from 1 to num_col.\n\n\nright <- 3\ndown <- 1\n\nnum_rows <- nrow(tree_mat)\nnum_col <- ncol(tree_mat)\n\n# start counting trees encountered\ntrees <- 0\n\n# start square\nx <- 1\ny <- 1\n  \nwhile (x <= num_rows) {\n  \n  # cat(\"row: \", x, \"col: \", y, \"\\n\")\n  \n  if (tree_mat[x,y] == \"#\") trees <- trees + 1\n  \n  x <- x + down\n  y <- ((y + right - 1) %% num_col) + 1\n  \n}\n\ntrees\n\n\n[1] 299\n\nPart 2: Checking further slopes\nWe now need to check several other trajectories, and multiply together the number of trees we find, so we wrap the Part 1 code into a function.\n\n\nslope_check <- function(tree_mat, right, down) {\n  \n  num_rows <- nrow(tree_mat)\n  num_col <- ncol(tree_mat)\n\n  # start counting trees encountered\n  trees <- 0\n\n  # start square\n  x <- 1\n  y <- 1\n  \n  while (x <= num_rows) {\n  \n    if (tree_mat[x,y] == \"#\") trees <- trees + 1\n  \n    x <- x + down\n    y <- ((y + right - 1) %% num_col) + 1\n  \n  }\n  trees\n}\n\nprod(slope_check(tree_mat, 1, 1),\n     slope_check(tree_mat, 3, 1),\n     slope_check(tree_mat, 5, 1),\n     slope_check(tree_mat, 7, 1),\n     slope_check(tree_mat, 1, 2))\n\n\n[1] 3621285278\n\nDay 4: Passport Processing\nMy day 4 data\nPart 1: Complete passports\n\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n\n\nUsing readr::read_tsv() off the bat removes the blank lines, making it impossible to identify the different passports, but reading in the data via readLines() then converting as_tibble() preserves them, and then allows us to use tidyverse functions for the remaining tidying. cumsum() on a logical vectors takes advantage of FALSE having a numeric value of zero and TRUE having a numeric value of one.\n\n\npassports <- readLines(\"data/AoC_day4.txt\") %>%\n  as_tibble() %>%\n  separate_rows(value, sep = \" \") %>%\n  mutate(new_passport = value == \"\") %>%\n  mutate(ID = cumsum(new_passport) + 1) %>%\n  filter(!new_passport) %>%\n  select(-new_passport) %>%\n  separate(value, c(\"key\", \"value\"), sep = \":\") %>%\n  relocate(ID)\n\n\n\nOur data is now in three columns, with ID, key and value, so now we need to find the number of passports with all seven fields once cid is excluded:\n\n\npassports %>%\n  filter(key != \"cid\") %>%\n  count(ID) %>%\n  filter(n == 7) %>%\n  nrow()\n\n\n[1] 210\n\nPart 2: Valid passports\nNow we need to add data validation checks:\nbyr (Birth Year) - four digits; at least 1920 and at most 2002.\niyr (Issue Year) - four digits; at least 2010 and at most 2020.\neyr (Expiration Year) - four digits; at least 2020 and at most 2030.\nhgt (Height) - a number followed by either cm or in:\nIf cm, the number must be at least 150 and at most 193.\nIf in, the number must be at least 59 and at most 76.\n\nhcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.\necl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.\npid (Passport ID) - a nine-digit number, including leading zeroes.\ncid (Country ID) - ignored, missing or not.\nIgnoring the cid field, we narrow down on passports that at least have the right number of fields, and extract the number from the hgt column:\n\n\ncomplete_passports <- passports %>%\n  filter(key != \"cid\") %>%\n  add_count(ID) %>%\n  filter(n == 7) %>%\n  select(-n) %>%\n  mutate(hgt_value = case_when(\n    key == \"hgt\" ~ readr::parse_number(value),\n    TRUE ~ NA_real_)) %>%\n  ungroup()\n\n\n\nThen we create a check column, which is TRUE when the value for each key meets the required conditions. Those with 7 TRUEs are valid. Note that with case_when() we’ve left the check column as NA when the condition is FALSE, requiring na.rm = TRUE in the call to sum(). We can get round that by adding a final line to the case_when() condition stating TRUE ~ FALSE. TRUE here is a catch-all for all remaining rows not covered by the conditions above, and then we set them to FALSE, but I find the line TRUE ~ FALSE unintuitive.\n\n\ncomplete_passports %>%\n  mutate(check = case_when(\n    (key == \"byr\" & value >= 1920) & (key == \"byr\" & value <= 2002) ~ TRUE,\n    (key == \"iyr\" & value >= 2010) & (key == \"iyr\" & value <= 2020) ~ TRUE,\n    (key == \"eyr\" & value >= 2020) & (key == \"eyr\" & value <= 2030) ~ TRUE,\n    key == \"hgt\" & str_detect(value, \"cm\") & hgt_value >= 150 & hgt_value <= 193 ~ TRUE,\n    key == \"hgt\" & str_detect(value, \"in\") & hgt_value >= 59 & hgt_value <= 76 ~ TRUE,  \n    key == \"hcl\" & str_detect(value, \"^#[a-f0-9]{6}$\") ~ TRUE,\n    key == \"ecl\" & value %in% c(\"amb\", \"blu\", \"brn\", \"gry\", \"grn\", \"hzl\", \"oth\") ~ TRUE,\n    key == \"pid\" & str_detect(value, \"^[0-9]{9}$\") ~ TRUE\n  )) %>%\n  group_by(ID) %>%\n  summarise(check_all = sum(check, na.rm = TRUE)) %>%\n  filter(check_all == 7) %>%\n  nrow()\n\n\n[1] 131\n\nDay 5: Binary Boarding\nMy day 5 data\nPart 1: Finding all seat IDs\n\n\nlibrary(dplyr)\nlibrary(stringr)\n\n\n\nThe code below sets starts by setting each row number to 127 and each column number to 7, the maximum they can be, then, working along the string, lowering the maximum (or leaving it as is) one letter at a time:\n\n\nboarding <- readr::read_tsv(\"data/AoC_day5.txt\", col_names = FALSE) %>%\n  rename(binary = X1)\n\nseat_IDs <- boarding %>%\n  mutate(row = 127) %>%\n  mutate(col = 7) %>%\n  mutate(row = if_else(str_sub(binary, 1, 1) == \"F\", row - 64, row)) %>%\n  mutate(row = if_else(str_sub(binary, 2, 2) == \"F\", row - 32, row)) %>%\n  mutate(row = if_else(str_sub(binary, 3, 3) == \"F\", row - 16, row)) %>%\n  mutate(row = if_else(str_sub(binary, 4, 4) == \"F\", row - 8, row)) %>%\n  mutate(row = if_else(str_sub(binary, 5, 5) == \"F\", row - 4, row)) %>%\n  mutate(row = if_else(str_sub(binary, 6, 6) == \"F\", row - 2, row)) %>%\n  mutate(row = if_else(str_sub(binary, 7, 7) == \"F\", row - 1, row)) %>%\n  mutate(col = if_else(str_sub(binary, 8, 8) == \"L\", col - 4, col)) %>%\n  mutate(col = if_else(str_sub(binary, 9, 9) == \"L\", col - 2, col)) %>%  \n  mutate(col = if_else(str_sub(binary, 10, 10) == \"L\", col - 1, col)) %>%  \n  mutate(ID = row * 8 + col) \n\nseat_IDs %>%\n  summarise(max = max(ID)) %>%\n  pull(max)\n\n\n[1] 963\n\nOK, I know I said in the introduction to this post that I would go with the first solution I think of that gets the right answer, and the above does work, but I’m deeply unhappy with the code. There’s too much repetition, I don’t like the use of subtraction when diving by 2 feels more appropriate in a binary context, and it doesn’t feel like I’ve taken full advantage of the mathematical structure of the problem. So, on further reflection, I realise that the way that ID is defined is essentially turning a binary number into a decimal, where we get the binary number as a string by replacing “B” and “R” by “1” and L\" and “F” by “0”. Then, I just found, there is a base R function strtoi() that takes a string of digits in a given base and converts it to a base 10 integer, just what we need:\n\n\nseat_IDs <- boarding %>%\n  mutate(binary = str_replace_all(binary, \"L|F\", \"0\")) %>%\n  mutate(binary = str_replace_all(binary, \"B|R\", \"1\")) %>%\n  mutate(ID = strtoi(binary, base = 2)) %>%\n  arrange(desc(ID))\n\nseat_IDs %>%\n  slice(1) %>%\n  pull(ID)\n\n\n[1] 963\n\nThat’s better!\nPart 2: Finding my seat ID\nWe need to find the missing number, so we arrange the IDs in ascending order and look at the gap between each ID and the preceding one. In most cases, that should be one. Where we have a gap of 2, we must have skipped the integer below:\n\n\nseat_IDs %>%\n  arrange(ID) %>%\n  mutate(diff = lag(ID)) %>%\n  mutate(gap = ID - diff) %>% \n  filter(gap == 2) %>%\n  summarise(my_seat = ID - 1) %>%\n  pull(my_seat)\n\n\n[1] 592\n\nDay 6: Custom Customs\nMy day 6 data\nPart 1: Anyone answers\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\n\n\nWithin each group, we need to find the number of unique letters within each group. We read in and separate the data using the tricks learnt for Day 4, and take advantage of the rowwise() feature in dplyr 1.0.0.\n\n\ncustoms_groups <- readLines(\"data/AoC_day6.txt\") %>%\n  as_tibble() %>%\n  mutate(new_group = value == \"\") %>%\n  mutate(group_ID = cumsum(new_group) + 1) %>%\n  filter(!new_group) %>%\n  select(-new_group) %>%\n  group_by(group_ID) \n\ncustoms_groups %>%\n  summarise(qs = str_c(value, collapse = \"\")) %>%\n  ungroup() %>%\n  mutate(qss = str_split(qs, \"\")) %>%\n  rowwise() %>%\n  mutate(qsu = list(unique(qss))) %>%\n  mutate(count = length(qsu)) %>%\n  ungroup() %>%\n  summarise(total = sum(count)) %>%\n  pull(total)\n\n\n[1] 6585\n\nPart 2: Everyone answers\nNow, instead of unique letters in a group, we need to find the number of letters which appear in all the answers for everyone in the same group. I first note how many people are in each group, then tabulate the number of occurrences of each letter in the group, then count (by summing a logical vector) the number of matches between occurrences of letter and the number in group. Finally, we sum across all groups.\n\n\ncustoms_groups %>%  \n  add_count(group_ID, name = \"num_in_group\") %>%\n  group_by(group_ID, num_in_group) %>%\n  summarise(qs = str_c(value, collapse = \"\")) %>%\n  ungroup() %>%\n  mutate(qss = str_split(qs, \"\")) %>%\n  rowwise() %>%\n  mutate(letter_table = list(table(qss))) %>%\n  slice(1) %>%\n  mutate(in_common = sum(num_in_group == letter_table)) %>%\n  ungroup() %>%\n  summarise(total = sum(in_common)) %>%\n  pull(total)\n\n\n[1] 3276\n\nDay 7: Handy Haverstocks\nMy day 7 data\nPart 1: Number of colour bags\n\n\nlibrary(tidyverse)\n\n\n\nWe have colour-coded bags that must contain a specific number of other colour-coded bags.\n\n\nbags <- read_tsv(\"data/AoC_day7.txt\", col_names = FALSE)\n\nhead(bags)\n\n\n# A tibble: 6 x 1\n  X1                                                                  \n  <chr>                                                               \n1 wavy bronze bags contain 5 striped gold bags, 5 light tomato bags.  \n2 drab indigo bags contain 4 pale bronze bags, 2 mirrored lavender ba…\n3 pale olive bags contain 3 faded bronze bags, 5 wavy orange bags, 3 …\n4 faded white bags contain 5 vibrant violet bags, 4 light teal bags.  \n5 mirrored magenta bags contain 2 muted cyan bags, 3 vibrant crimson …\n6 dull purple bags contain 1 striped fuchsia bag.                     \n\nOur first task is to parse the natural language and split the rules into one container/contains pair per line:\n\n\nrules <- bags %>%\n  mutate(rule = row_number()) %>%\n  separate(X1, c(\"container\", \"contains\"), sep = \" bags contain \") %>%\n  separate_rows(contains, sep = \",\") %>%\n  mutate(contains = str_remove(contains, \"\\\\.\")) %>%\n  mutate(contains = str_remove(contains, \"bags|bag\")) %>%\n  #mutate(contains = str_replace(contains, \"no other\", \"0 other\")) %>%\n  extract(contains, c('number', 'contains'), \"(\\\\d+) (.+)\") %>%\n  filter(!is.na(number)) %>%\n  mutate(contains = str_trim(contains)) %>%\n  mutate(number = as.integer(number)) \n\n\n\nTo find all bags that con eventually contain our shiny gold bag, we first find the bags that can contain it directly. We then find the bags that can contain those bags and take the union of the two levels. We repeat, stopping when going up a level adds no further bags to the vector of bag colours already found. We then subtract 1, because we don’t want to count the original shiny gold bag.\n\n\n# function to find all colours that contain a vector of other colours:\ncontains_colours <- function(colours) {\n  rules %>%\n    filter(contains %in% colours) %>%\n    distinct(container) %>%\n    pull(container)\n}\n\nbags <- \"shiny gold\"\nold_length <- length(bags)\nnew_length <- 0\n\n# keeping adding to the vector of bags, until no change\nwhile(old_length != new_length) {\n  old_length = length(bags)\n  bags <- base::union(bags, contains_colours(bags)) %>% unique()\n  new_length <- length(bags)\n  #cat(old_length, \", \", new_length, \"\\n\")\n}\n\nlength(bags) - 1\n\n\n[1] 274\n\nPart 2: Number of bags\nNow we need to discover the number of bags that a shiny gold bag must contain. I figured that lends itself to recursion, but struggled on the details. Hat tip to David Robinson for this solution. I’ve learnt a lot for myself by unpicking how it works.\n\n\ncount_all_contained <- function(colour) {\n  \n  relevant_rules <- rules %>%\n    filter(container %in% colour)\n  \n  sum(relevant_rules$number * (1 + map_dbl(relevant_rules$contains, count_all_contained)))\n  \n}\n\ncount_all_contained(\"shiny gold\")\n\n\n[1] 158730\n\nDay 8: Handheld Halting\nMy day 8 data\nPart 1: Infinite Loop\nOur programme gets stuck in an infinite loop. As well as keeping track of the accumulator, we need to keep track of where we’ve visited, and stop when we visit the same instruction twice. We use a data.frame() rather than a tibble() as the former is easier to index into.\n\n\ninstructions <- \n  read.table(\"data/AoC_day8.txt\", col.names = c(\"instruction\", \"value\"))\n\n\n\nWe start with a pretty straight-forward loop, noting that at most it can run for one more than the number of instructions in the programme until it hits an instruction it’s already visited. We update row number to visit next and the accumulator as appropriate.\n\n\ninstructions$visited <- 0\n\nrow <- 1\naccumulator <- 0\n\nnum_rows <- nrow(instructions)\n\nfor (i in 1:(num_rows+1)) {\n\n  if (instructions[row, \"visited\"] != 0) break\n  \n  # +1 on number of times the row is visited\n  instructions[row, \"visited\"] <- instructions[row, \"visited\"] + 1\n\n  # case when the instruction is \"acc\"\n  if (instructions[row, \"instruction\"] == \"acc\") {\n    accumulator <- accumulator + instructions[row, \"value\"]\n    row <- row + 1\n  }\n  \n  # case when the instruction is \"jmp\"\n  else if (instructions[row, \"instruction\"] == \"jmp\") {\n    row <- row + instructions[row, \"value\"]\n  }\n\n  # case when the instruction is \"nop\"\n  else if (instructions[row, \"instruction\"] == \"nop\") {\n    row <- row + 1\n  }\n}\n  \naccumulator\n\n\n[1] 1915\n\nPart 2: Fixing the programme\nTo break the loop, one of the nop instructions in the programme should be a jmp or vice versa. The plan is to swap these out one by one and check if the programme completes. It’s not a sophisticated approach, but it works fast enough (about a second).\nFirst we note that the broken instruction must be one that we visited in Part 1. Also, an instruction of jmp with a value of 0 will get us stuck in a one-line infinite loop, so we avoid that.\n\n\nlibrary(dplyr)\n\nrows_to_check <- instructions %>%\n  mutate(row_id = row_number()) %>%\n  filter(visited != 0) %>%\n  filter(instruction != \"acc\") %>%\n  filter(!(instruction == \"nop\" & value == 0)) %>%\n  pull(row_id)\n\n\n\nWe have 93 instruction to check. We modify our code from Part 1 slightly, converting it into a function and returning a list with values completes and accumulator. completes is FALSE as soon as we visit a row twice and TRUE if the number of our next row to visit is greater than the number of rows in the programme.\n\n\nprogramme_completes <- function(instructions) {\n  \n  row <- 1L\n  accumulator <- 0\n  \n  num_rows <- nrow(instructions)\n  \n  for (i in 1:(num_rows+1)) {\n  \n    if (instructions[row, \"visited\"] != 0) {\n      return(list(completes = FALSE, accumulator = accumulator)) \n    }\n    \n    # +1 on number of times the row is visited\n    instructions[row, \"visited\"] <- instructions[row, \"visited\"] + 1\n  \n    # case when the instruction is \"acc\"\n    if (instructions[row, \"instruction\"] == \"acc\") {\n      accumulator <- accumulator + instructions[row, \"value\"]\n      row <- row + 1\n    }\n  \n    else if (instructions[row, \"instruction\"] == \"jmp\") {\n      row <- row + instructions[row, \"value\"]\n    }\n  \n    else if (instructions[row, \"instruction\"] == \"nop\") {\n      row <- row + 1\n    }\n  \n    if (row > num_rows) {\n      return(list(completes = TRUE, accumulator = accumulator)) \n    }\n  }\n}  \n\n\n\nWe now loop over the rows we’ve identified to check, breaking the loop as soon as we find a programme that completes. Finally, we extract the accumulator value from the successful programme.\n\n\ninstructions$visited <- 0\n\nfor (row in rows_to_check) {\n  \n  # modify one row of the instructions,\n  # copying data frame so we don't have to modify it back\n  modified_instructions <- instructions\n  \n  ifelse(instructions[row, 1] == \"jmp\", \n         modified_instructions[row, 1] <- \"nop\", \n         modified_instructions[row, 1] <- \"jmp\") \n  \n  # check if the modified programme completes\n  check_programme <- programme_completes(modified_instructions)\n  \n  if (check_programme$completes) \n    break\n}\n\ncheck_programme$accumulator\n\n\n[1] 944\n\nDay 9: Encoding Error\nMy day 9 data\nPart 1: Weak Link\nWe have to find the first number in the list which is not the sum of a pair of different numbers in the preceding 25 numbers.\n\n\ninput <- as.double(readLines(\"data/AoC_day9.txt\")) \n\n\n\nThere’s a nice trick for finding the pair of numbers in a vector that sum to a target that was doing the rounds on twitter in response to the Day 1 challenge: intersect(input, 2020 - input). For this challenge, we expand on that idea, writing it as a check_sum function. Where there’s more than one pair, it won’t say which pair together, and if the number that’s half the target appears in the addends, it will only appear once in the output. However, for this challenge, we only need to know when there are no pairs that sum to the target, which will be the case when the length of the output of check_sum is 0.\n\n\ncheck_sum <- function(target, addends) {\n  intersect(addends, target-addends)\n}\n\n\n\nThen, it’s simply a case of iterating over windows of length 25, checking whether the following number is the sum of a distinct pair in that window, and returning the first one that isn’t.\n\n\nfind_invalid_num <- function(vec, win = 25) {\n  \n  for (i in (win+1):length(vec)) {\n    check <- check_sum(vec[i], vec[(i-win):(i-1)])\n    \n    if (length(check) == 0) return(vec[i])\n  }\n  \n}\n\nfind_invalid_num(input)\n\n\n[1] 507622668\n\nPart 2: Contiguous set\nFind a contiguous set in the list that sums to the invalid number from Part 1, and add together the largest and smallest number in that range.\nFirst, we note that after a certain point, all numbers in the input are larger than the target, so we don’t need to consider those. We reduce our input vector accordingly.\n\n\ntarget <- find_invalid_num(input)\n\ninput_reduced <- input[1:(max(which(input <= target)))]\n\n\n\nTo find the contiguous set in the list that sums to the target, we make use of accumulate() from the purrr package. Let the input list be \\(x = (x_1, x_2,..., x_n)\\). Then accumulate(x, sum) returns \\(a = (x_1, x_1 + x_2,..., \\sum_{j=1}^n x_j)\\). We check whether any element of this vector is equal to the target. If so we index into the input vector appropriately, sum the min and max in the range and we’re done. If not, we consider the sums of all windows starting with the second element of the input list, and so on.\n\n\ncontiguous_sum <- function(input, target) {\n  \n  len <- length(input)\n  \n  for (i in 1:len) {\n    a <- purrr::accumulate(input[i:len], sum)\n    b <- a == target\n    \n    if (sum(b) == 1) {\n      output_length <- which(b)\n      \n      contiguous_set <- input[i:(i + output_length - 1)]\n      \n      return(sum(range(contiguous_set)))\n    }\n  }\n}\n\ncontiguous_sum(input_reduced, target)\n\n\n[1] 76688505\n\nI appreciate that there’s some redundant calculation in this method. The vectors of accumulated sums can contain numbers larger than the target (if writing our own loop, we could break as soon as the accumulated sum got too big). Also, in retrospect, we could have only run accumulate once, then in the second iteration of the loop, subtracted input[1] from the result, in the third iteration subtracted input[2] from that result, etc. However, the function as written is concise and easy to understand, and gets our answer in around a second, so that will do!\nDay 10: Adapter Array\nMy day 10 data\nPart 1: Adapter Distribution\nThis is simply a case of ordering the adapters, prepending 0 and appending the the max in the list plus three, then finding the differences.\n\n\nlibrary(dplyr)\n\n\n\n\n\nadapters <- \n  readLines(\"data/AoC_day10.txt\") %>%\n  as.integer()\n\nadapter_diffs <- c(adapters, 0, max(adapters) + 3) %>% \n  sort() %>%\n  diff()\n\nsum(adapter_diffs == 1) * sum(adapter_diffs == 3)\n\n\n[1] 3034\n\nPart 2: Adapter combinations\nInstead of building up sequences of adapters, we see what we can remove from the full list.\nFirst, we check the diffs: are they just 1 and 3 or are there any 2s?\n\n\ntable(adapter_diffs)\n\n\nadapter_diffs\n 1  3 \n74 41 \n\nWe can’t remove an adapter if its difference with the previous adapter is 3, otherwise the difference between the adapters on either side of it will be too big.\nWhat about diffs of 1? It depends how many ones there are around it. We can check this using the rle() (run length encoding) function\n\n\nruns <- rle(adapter_diffs)\nruns\n\n\nRun Length Encoding\n  lengths: int [1:48] 3 2 4 2 4 2 4 1 4 2 ...\n  values : num [1:48] 1 3 1 3 1 3 1 3 1 3 ...\n\nWhat is the distribution of lengths of sequences of 1s?\n\n\nruns_table <- table(runs$lengths) \nruns_table\n\n\n\n 1  2  3  4 \n13 14 10 11 \n\nWe have at most four diffs of 1 in a row.\nWe need to check that if we remove an adapter, the new differences do not exceed 3. Example sequences really helped me figure out what’s going on here:\nIf the diff sequence is …, 3, 1, 3,… (e.g. adapters 1, 4, 5, 8)\n1 option to keep as is\nWe cannot remove any adapters\n1 option in total\n\nIf the diff sequence is …, 3, 1, 1, 3,… (e.g. adapters 1, 4, 5, 6, 9)\n1 option to keep as is\n1 option to remove one adapter (e.g. the 5)\nwe cannot remove two adapters\n2 options total\n\nIf the diff sequence is …, 3, 1, 1, 1, 3,… (e.g. adapters 1, 4, 5, 6, 7, 10)\n1 option to keep as is\n2 options to remove one adapter (e.g. the 5 or 6)\n1 options to remove two adapters (e.g. the 5 and 6)\nWe cannot remove three adapters\n4 options total\n\nIf the diff sequence is …, 3, 1, 1, 1, 1, 3,… (e.g. adapters 1, 4, 5, 6, 7, 8, 11)\n1 option to keep as is\n3 options to remove one adapter (e.g. 5, 6, or 7)\n3 options to remove two adapters (e.g. any two of 5, 6, and 7)\nWe cannot remove three adapters\n7 options total\n\nFinally, we multiply each run length of difference of 1s with the number of options we have for removing adapters, then take the product of those products.\n\n\nruns_df <- tibble(lengths = runs$lengths, values = runs$values)\n\noptions <- tibble(lengths = c(1,2,3,4), options = c(1,2,4,7))\n\nruns_df %>%\n  filter(values == 1) %>%\n  left_join(options, by = \"lengths\") %>%\n  summarise(prod_options = prod(options)) %>%\n  pull(prod_options) %>%\n  format(scientific = FALSE) \n\n\n[1] \"259172170858496\"\n\nDay 11: Seating System\nMy day 11 data\nPart 1: Changing layout\nMy code for Day 11 runs a little slow (about 10 seconds for Part 1 and 80 seconds for Part 2), so for the sake of being able to rebuild this page quickly as I keep updating it working through the challenges, I will demonstrate this code with the test input provided as an example.\n\n\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\n\n\n\nFirst we read in the data and convert it to a matrix (using the datapasta package for the test input):\n\n\n# layout <- readr::read_tsv(\"data/AoC_day11.txt\", col_names = FALSE)\n\nlayout <- tibble::tribble(\n  ~X1,\n  \"L.LL.LL.LL\",\n  \"LLLLLLL.LL\",\n  \"L.L.L..L..\",\n  \"LLLL.LL.LL\",\n  \"L.LL.LL.LL\",\n  \"L.LLLLL.LL\",\n  \"..L.L.....\",\n  \"LLLLLLLLLL\",\n  \"L.LLLLLL.L\",\n  \"L.LLLLL.LL\"\n  )\n\n\n\n\n\n# get number of columns for matrix\nnum_col <- layout %>%\n  mutate(length = str_length(X1)) %>%\n  slice(1) %>%\n  pull(length)\n\n# split layout into characters and turn to vector\nlayout_vec <- layout %>%\n  mutate(X1 = strsplit(X1, split = character(0), fixed = TRUE)) %>%\n  pull(X1) %>%\n  unlist()\n\n# organise into matrix\ninitial_layout <- matrix(layout_vec, ncol = num_col, byrow = TRUE)\n\n\n\nNext, we write a helper function that, given a matrix and row and column indices, returns a vector of the adjacent seats. We need to take care when indexing into the matrix, so we treat all corner and edge cases separately. Fiddly, but gets the job done.\n\n\nget_adj <- function(mat, i,j) {\n  \n  nr <- nrow(mat)\n  nc <- ncol(mat)\n  \n  # corner cases\n  if (i == 1 & j == 1) {adj <- c(mat[1,2], mat[2,1:2])}\n  else if (i == 1 & j == nc) {adj <- c(mat[1,(nc-1)], mat[2,(nc-1):nc])}\n  else if (i == nr & j == 1) {adj <- c(mat[nr,2], mat[nr-1,1:2])}\n  else if (i == nr & j == nc) {adj <- c(mat[nr-1, (nc-1):nc], mat[nr, nc-1])}  \n  \n  # edge cases\n  else if (i == 1) {adj <- c(mat[1, c(j-1,j+1)], mat[2, (j-1):(j+1)])}\n  else if (i == nr) {adj <- c(mat[nr, c(j-1,j+1)], mat[nr-1, (j-1):(j+1)])}\n  else if (j == 1) {adj <- c(mat[c(i-1, i+1), 1], mat[(i-1):(i+1), 2])}\n  else if (j == nc) {adj <- c(mat[c(i-1, i+1), nc], mat[(i-1):(i+1), nc-1])}\n  \n  # inside cases\n  else {adj <- c(mat[i-1,(j-1):(j+1)], mat[i,c(j-1,j+1)], mat[i+1,(j-1):(j+1)])}\n  \n  adj\n}\n\n\n\nOnce we have a vector of surrounding seats, we can apply the rules in the problem to determine whether a given seat needs to change state. The needs_changing helper function does that. It’s overkill at this point to give options to specify the function for finding the vector of seats to check, and the maximum number of occupied seats people can tolerate around them, but (spolier alert) I put in these options when working on the challenge in Part 2.\n\n\nneeds_changing <- \n  function(mat, i,j, get_surround = get_adj, max_occupied = 4) {\n  \n  surround <- get_surround(mat, i,j)\n  n_occupied <- sum(surround == \"#\")\n  \n  if ((mat[i,j] == \"L\") & (n_occupied == 0)) return(TRUE)\n  \n  else if ((mat[i,j] == \"#\") & (n_occupied >= max_occupied)) {\n    return(TRUE)\n  }\n  \n  else return(FALSE)\n}\n\n\n\nSince floor spaces don’t change, we only need to consider seats. We save the indices of the seats into a data frame, so we can vectorise over it using tidyverse functions. However, when we’ve determined the seats that need changing, using our needs_changing function, we need to convert those indices from a data.frame into a matrix, in order to index into the layout matrix appropriately and make the changes.\n\n\nseats <- which(initial_layout != \".\", arr.ind = TRUE)\n\nseats_df <- as.data.frame(seats) %>%\n  rename(i = row, \n         j = col)\n\n\n\n\n\nlayout <- initial_layout\niters <- 0\n\n# loop until there are no further changes\nrepeat {\n  \n  change <- 0\n  \n  seats_to_change <- \n    seats_df %>%\n    rowwise() %>%\n    mutate(change_seat = needs_changing(layout,i,j))   \n  \n  change <- sum(seats_to_change$change_seat)\n  \n  if (change == 0) break\n  \n  indices_to_change <- \n    seats_to_change %>%\n    filter(change_seat) %>%\n    select(i,j) %>%\n    as.matrix()  \n\n  layout[indices_to_change] <- \n    setdiff(c(\"L\", \"#\"),  layout[indices_to_change])\n  \n  iters <- iters + 1\n}\n\npart_1_iters <- iters\nsum(layout== \"#\")\n\n\n[1] 37\n\nOn the test set, this takes 5 iterations. On the full data set, my answer is 2316, and it took 107 iterations.\nPart 2: Looking further\nNow, people look to the first seat they can see in each direction, and will change from occupied to unoccupied if five or more of them are occupied.\nThe plan is to write a function that extracts full vectors from a given seat to the edge of the layout matrix in each of the eight directions, then finds the first seat in each of those directions, and finally collects those into a vector of the seats under consideration when determining if a change is needed. Then I can reuse the loop from Part 1, just changing the arguments in the calls to needs_changing.\nHere’s a helper function to get the first seat in a vector looking in one direction:\n\n\nget_first_seat_from_vec <- function(vec) {\n  \n  if (any(vec %in% c(\"#\", \"L\"))) {\n    return(vec[min(which(vec != \".\"))])\n  }\n  \n  return(NA)\n}\n\n\n\nNow, if I thought getting adjacent seats to a given seat in Part 1 was fiddly, it’s nothing on getting a vector from a given seat to the edge of the matrix. There are many cases to consider to make we we don’t go out of bounds. In the diagonal directions, first we get a matrix of the indices of the matrix we need, then subset into the matrix accordingly.\n\n\n# takes a layout matrix (elements \".\", \"#\", \"L\")\n# returns vector with first \"L\" or \"#\" encountered in each direction\nget_first_seat <- function(mat, i,j) {\n  \n  nr <- nrow(mat)\n  nc <- ncol(mat)\n  \n  # North\n  if (i == 1) N <- NA\n  if (i > 1) N <- mat[(i-1):1,j]\n  \n  # South\n  if (i == nr) S <- NA\n  if (i < nr) S <- mat[(i+1):nr,j]\n  \n  # East\n  if (j == nc) E <- NA\n  if (j < nc) E <- mat[i, (j+1):nc]\n  \n  # West\n  if (j == 1) W <- NA\n  if (j > 1) W <- mat[i, (j-1):1]\n  \n  # how far in each direction to edge of matrix\n  to_N <- i - 1\n  to_S <- nr - i\n  to_E <- nc - j\n  to_W <- j - 1\n  \n  # North-West\n  NW_length <- min(to_N, to_W)\n  \n  if (i == 1 | j == 1) NW <- NA\n  else {\n    mat_index <- \n      matrix(c((i-1):(i-NW_length), (j-1):(j-NW_length)), ncol = 2)\n    NW <- mat[mat_index]\n  }\n  \n  # North-East\n  NE_length <- min(to_N, to_E)\n  \n  if (i == 1 | j == nc) NE <- NA\n  else {\n    mat_index <- \n      matrix(c((i-1):(i-NE_length), (j+1):(j+NE_length)), ncol = 2)\n    NE <- mat[mat_index]\n  }\n  \n  # South-East\n  SE_length <- min(to_S, to_E)\n  \n  if (i == nr | j == nc) SE <- NA\n  else {\n    mat_index <- \n      matrix(c((i+1):(i+SE_length), (j+1):(j+SE_length)), ncol = 2)\n    SE <- mat[mat_index]\n  }\n  \n  # South-West\n  SW_length <- min(to_S, to_W)\n  \n  if (i == nr | j == 1) SW <- NA\n  else {\n    mat_index <- \n      matrix(c((i+1):(i+SW_length), (j-1):(j-SW_length)), ncol = 2)\n    SW <- mat[mat_index]\n  }\n\n  # vectors from mat[i,j] to the edge in each direction \n  all_vecs <- \n    (list(N = N, S = S, E = E, W = W, NW = NW, NE = NE, SE = SE, SW = SW))\n  \n  # the first seat in each direction, collapsed to a vector\n  first_seats <- purrr::map_chr(all_vecs, get_first_seat_from_vec)\n  \n  # remove NAs from list and return\n  # (these occur either when starting on an edge, \n  # or when there are no seats in a given direction)\n  return(first_seats[!is.na(first_seats)])\n\n}\n\n\n\n\n\nlayout <- initial_layout\niters <- 0\n\n# loop until there are no further changes\nrepeat {\n  \n  change <- 0\n  \n  seats_to_change <- \n    seats_df %>%\n    rowwise() %>%\n    mutate(change_seat = needs_changing(layout,i,j, get_first_seat, 5))   \n  \n  change <- sum(seats_to_change$change_seat)\n  \n  if (change == 0) break\n  \n  indices_to_change <- \n    seats_to_change %>%\n    filter(change_seat) %>%\n    select(i,j) %>%\n    as.matrix()  \n\n  layout[indices_to_change] <- \n    setdiff(c(\"L\", \"#\"),  layout[indices_to_change])\n  \n  iters <- iters + 1\n}\n\npart_2_iters <- iters\nsum(layout== \"#\")\n\n\n[1] 26\n\nOn the test set, this takes 6 iterations. On the full data set, my answer is 2128, and it took 87 iterations. Given this is fewer iterations than in Part 1, it must be my code for getting the first seat that’s slowing things down.\nI am unsatisfied both by how many lines of code this has taken as well as the time taken to run. The introduction to Advent of Code says that each challenge has a solution that will complete in at most 15 seconds on ten year old hardware. So clearly there’s a better way of doing this. Perhaps something to revisit in the future.\nNext\nI was late to the game, and that was as far as I managed to get in December 2020. I’m looking forward to taking on the challenge again in 2021!\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-05T09:34:19+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2017-06-17-n-letter-words/",
    "title": "n_letter_words and a personal (publicly available) package",
    "description": "How I created a handy function and a personal package",
    "author": [
      {
        "name": "Ella Kaye",
        "url": {}
      }
    ],
    "date": "2017-06-17",
    "categories": [],
    "contents": "\nThere’s a little R function that I wrote and packaged up to generate a vector or data frame of words of a given length. I find it useful in a wide variety of contexts and thought other might too. To kick off my new blog, here’s a post about it.\nThe function, n_letter_words, came about because I wanted to be able to generate row and column names for a large matrix - didn’t matter what they were, as long as they were unique. Since I was in the habit of using the built-in LETTERS vector to do this for small matrices, I naturally thought of using combinations of letters to do this in a larger case. In figuring out how to do this, as is so often the case, it was stackoverflow to the rescue. There, I learnt about expand.grid and could then use some tidyverse tools to get the vector I was after:\n\n\nlibrary(tidyverse)\nout <- expand.grid(LETTERS, LETTERS) %>%\n  as_tibble() %>%\n  unite(word, 1:2, sep = \"\") %>%\n  pull()\nc(head(out), tail(out))\n\n\n [1] \"AA\" \"BA\" \"CA\" \"DA\" \"EA\" \"FA\" \"UZ\" \"VZ\" \"WZ\" \"XZ\" \"YZ\" \"ZZ\"\n\nSorted! At least I thought so, until, a couple of months later, when I wanted to generate names for a 1000*1000 matrix, and realised both that I’d forgotten the expand.grid trick, and once I’d re-found the stackoverflow post, that it didn’t give me enough words. That was enough to make it worth writing a function, taking n as an argument, that gives all ‘words’ of length \\(n\\).\nWriting functions always makes me think of what other arguments might be useful. What if we want something between the 676 two-letter words and 17,576 three-letter words (or the 456,976 four-letter words, etc)? Hence the argument num_letters, which can be set between 1 and 26, and results in a total of \\(\\text{num_letters}^n\\) words. By default, the function returns a tibble, but setting as_vector = TRUE does what you’d expect. And I threw in a case argument too.\nNow that I had my function, what to do with it? I remembered articles I’d read about the usefulness of making and sharing a personal package. Now seemed like the time to do that myself.\nSo, here is my personal package, EMK. If you think that n_letter_words might be of use to you, then feel free to install!\n\n\ndevtools::install_github(\"EllaKaye/EMK\")\n\n\n\nSome examples of n_letter_words:\n\n\nlibrary(EMK)\n\nn_letter_words(2)\n\n\n# A tibble: 676 x 1\n   word \n   <chr>\n 1 AA   \n 2 BA   \n 3 CA   \n 4 DA   \n 5 EA   \n 6 FA   \n 7 GA   \n 8 HA   \n 9 IA   \n10 JA   \n# … with 666 more rows\n\nsome_three_letter_words <- n_letter_words(3, num_letters = 10, \n                                          case = \"lower\", \n                                          as_vector = TRUE)\n\nc(head(some_three_letter_words), tail(some_three_letter_words))\n\n\n [1] \"aaa\" \"baa\" \"caa\" \"daa\" \"eaa\" \"faa\" \"ejj\" \"fjj\" \"gjj\" \"hjj\" \"ijj\"\n[12] \"jjj\"\n\nlength(some_three_letter_words)\n\n\n[1] 1000\n\nFor now, my personal package has only this one function, but watch this space! No doubt I’ll be adding more that I find useful. Perhaps, you’ll find them useful too.\nIncidentally, none of the above would have happened if I’d just thought, for my test matrix A, to set dimnames(A) <- list(1:nrow(A), 1:ncol(A))!\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-05T09:39:03+01:00",
    "input_file": {}
  }
]
